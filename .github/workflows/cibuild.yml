name: Gomboc.ai CLI test suite

on:
  pull_request:
    branches: ["main", "clean"]

jobs:
  pull-schema:
    uses: Gomboc-AI/ReusableWorkflows/.github/workflows/pullGraphqlSchema.yml@main
    with:
      ECR_SERVICE: ${{ vars.AWS_ECR_REPO_SCANAPI }}
      ROLE_SERVICE: ${{ github.event.repository.name=='cli' && 'cli' || 'cli-dev' }}

  cibuild:
    name: CI Build
    needs: pull-schema
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    env:
      CLI_REPO: 'cli'
      FORCE_COLOR: 3
      SCRIPTS: ./tests/scripts
      CFN_CONFIGS: tests/cfn/configs
      CFN_OUTPUTS: tests/cfn/outputs
      TF_CONFIGS: tests/tf/configs
      TF_FILES: tests/tf/files
      TF_OUTPUTS: tests/cfn/outputs
      SUCCESS: 0
      INVALID_CONFIG_FILE: 10
      VIOLATIONS_FOUND: 20
      SIDE_EFFECTS_FAILED: 30
      CLIENT_ERROR: 98
      SERVER_ERROR: 99
      NO_TEMPLATES_FOUND: 101
      TEMPLATE_ERROR: 102
      INVALID_PLAN_FILE: 201
      NO_CONFIGURATION_FILES_FOUND: 202
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16.20.0
      
      - uses: actions/download-artifact@v3
        with:
          name: graphql-schema
      
      - name: Generate types
        run: |
          npm install -g apollo
          npm install -g graphql
          apollo codegen:generate --localSchemaFile=schema.graphql --target=typescript --tagName=gql --queries='src/apiclient/*.ts' --globalTypesFile='src/apiclient/__generated__/GlobalTypes.ts'

      - name: Build, lint and install CLI
        run: |
          npm i
          npm run build
          npm run lint
          npm install -g .

      - name: Get OIDC token 
        id: get-oidc-token
        run: |
          echo "ID_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | python -c "import sys, json; print(json.load(sys.stdin)['value'])")" >> $GITHUB_OUTPUT

      - name: Settings 
        run: |
          chmod 755 $SCRIPTS/wipe-json-property-value.sh
          chmod 755 $SCRIPTS/assert-code.sh
          chmod 755 $SCRIPTS/assert-output.sh
          set -e
      
      - name: remediate remote terraform - Test single violation with side effects
        if: ${{ github.event.repository.name != env.CLI_REPO }}
        run: |
          EXIT_CODE=0
          gomboc remediate remote terraform --config $TF_CONFIGS/001.yaml --submit-for-review --wd $TF_FILES/violations-001/tf --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json --access-token ${{ secrets.GITHUB_TOKEN }}
          gomboc remediate remote terraform --config $TF_CONFIGS/001.yaml --submit-for-review --wd $TF_FILES/violations-001/tf --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json --access-token ${{ secrets.GITHUB_TOKEN }} > output.json
          gomboc remediate remote terraform --config $TF_CONFIGS/001.yaml --submit-for-review --wd $TF_FILES/violations-001/tf --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json --access-token ${{ secrets.GITHUB_TOKEN }} > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND

      - name: scan terraform - Test single violation
        run: |
          EXIT_CODE=0
          gomboc scan terraform --config $TF_CONFIGS/001.yaml --tf-directory $TF_FILES/violations-001/tf --tf-plan tfplan.json --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND

      - name: scan terraform github - Test single violation with side effects
        if: ${{ github.event.repository.name != env.CLI_REPO }}
        run: |
          EXIT_CODE=0
          gomboc scan terraform github --config $TF_CONFIGS/001.yaml --tf-directory $TF_FILES/violations-001/tf --tf-plan tfplan.json --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json --access-token ${{ secrets.GITHUB_TOKEN }} --create-pr > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND

      - name: scan cloudformation - Test malformed config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/malformed-yaml.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: scan cloudformation - Test non existing config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config this-file-does-not-exist.exe --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: scan cloudformation - Test config without search patterns
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/no-search-patterns.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: scan cloudformation - Test config without policy
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/no-policies.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: scan cloudformation - Test config with no templates found
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/no-templates-found.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $NO_TEMPLATES_FOUND

      - name: scan cloudformation - Test single JSON template with violations (001)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/001.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND
          $SCRIPTS/assert-output.sh output.json $CFN_OUTPUTS/001.json

      - name: scan cloudformation github - Test single JSON template with violations (001) with SIDE EFFECTS
        if: ${{ github.event.repository.name != env.CLI_REPO }}
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CFN_CONFIGS/001.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json --access-token ${{ secrets.GITHUB_TOKEN }} --create-pr > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND

      - name: scan cloudformation - Test single YAML template with violations (002)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/002.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND
          $SCRIPTS/assert-output.sh output.json $CFN_OUTPUTS/002.json

      - name: scan cloudformation - Test matching a random json (not a cfn template)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation --config $CFN_CONFIGS/match-not-a-cfn-template.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          $SCRIPTS/assert-code.sh $EXIT_CODE $TEMPLATE_ERROR
