name: Gomboc.ai CloudFormation CLI test suite

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    branches: ["main"]

  push:
    branches: ["main"]

jobs:
  pull-schema:
    uses: Gomboc-AI/ReusableWorkflows/.github/workflows/pullGraphqlSchema.yml@main
    with:
      ECR_SERVICE: 'scanapi'
      ROLE_SERVICE: 'cli-dev'

  cibuild:
    name: CI Build
    needs: pull-schema
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: 3
      CONFIGS: tests/configs
      OUTPUTS: tests/outputs
      SUCCESS: 0
      INVALID_CONFIG_FILE: 10
      VIOLATIONS_FOUND: 20
      SIDE_EFFECTS_FAILED: 30
      CLIENT_ERROR: 98
      SERVER_ERROR: 99
      NO_TEMPLATES_FOUND: 101
      TEMPLATE_ERROR: 102
      INVALID_PLAN_FILE: 201
      NO_CONFIGURATION_FILES_FOUND: 202
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - run: npm i

      - uses: actions/download-artifact@v3
        with:
          name: _graphql
      
      - run: ls -R
        working-directory: _graphql

      - run: ./node_modules/.bin/apollo codegen:generate --localSchemaFile=_graphql/schema.graphql --target=typescript --tagName=gql --queries='src/apiclient/*.ts' --globalTypesFile='src/apiclient/__generated__/GlobalTypes.ts'

      - run: npm run build

      - run: npm run lint

      - run: npm install -g .

      - name: Get OIDC token 
        id: get-oidc-token
        run: |
          echo "ID_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | python -c "import sys, json; print(json.load(sys.stdin)['value'])")" >> $GITHUB_OUTPUT

      - name: Settings 
        run: |
          chmod 755 ./tests/scripts/wipe-json-property-value.sh
          chmod 755 ./tests/scripts/assert-code.sh
          chmod 755 ./tests/scripts/assert-output.sh
          set -e
      
      - name: Test malformed config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/malformed-yaml.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: Test non existing config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config this-file-does-not-exist.exe --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: Test config without search patterns
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/no-search-patterns.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: Test config without policy
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/no-policies.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $INVALID_CONFIG_FILE

      - name: Test config with no templates found
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/no-templates-found.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $NO_TEMPLATES_FOUND

      - name: Test single JSON template with violations (001)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/001.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND
          ./tests/scripts/assert-output.sh output.json $OUTPUTS/001.json

      - name: Test single YAML template with violations (002)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/002.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $VIOLATIONS_FOUND
          ./tests/scripts/assert-output.sh output.json $OUTPUTS/002.json

      - name: Test matching a random json (not a cfn template)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/match-not-a-cfn-template.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE $TEMPLATE_ERROR
