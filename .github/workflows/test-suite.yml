name: Gomboc.ai CloudFormation CLI test suite

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    branches: ["main"]

  push:
    branches: ["main"]

env:
  FORCE_COLOR: 3
  CONFIGS: tests/configs
  OUTPUTS: tests/outputs
  SUCCESS: 0
  INVALID_CONFIG_FILE: 10
  VIOLATIONS_FOUND: 20
  SIDE_EFFECTS_FAILED: 30
  CLIENT_ERROR: 98
  SERVER_ERROR: 99
  NO_TEMPLATES_FOUND: 101
  TEMPLATE_ERROR: 102
  INVALID_PLAN_FILE: 201
  NO_CONFIGURATION_FILES_FOUND: 202

jobs:
  setup:
    name: Setup tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install globally and test help
        shell: bash
        run: | 
          npm i
          npm run build
          npm install -g .
          echo $(gomboc --help) 

      - name: Get OIDC token 
        id: get-oidc-token
        run: |
          echo "ID_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | python -c "import sys, json; print(json.load(sys.stdin)['value'])")" >> $GITHUB_OUTPUT

      - name: Settings 
        run: |
          chmod 755 ./tests/scripts/wipe-json-property-value.sh
          chmod 755 ./tests/scripts/assert-code.sh
          chmod 755 ./tests/scripts/assert-output.sh
          set -e
      
  test-suite:
    needs: setup
    name: Test suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Test malformed config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config $CONFIGS/malformed-yaml.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.INVALID_CONFIG_FILE }}

      - name: Test non existing config file
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config this-file-does-not-exist.exe --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.INVALID_CONFIG_FILE }}

      - name: Test config without search patterns
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/no-search-patterns.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.INVALID_CONFIG_FILE }}

      - name: Test config without policy
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/no-policies.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.INVALID_CONFIG_FILE }}

      - name: Test config with non existing capability
        if: false
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/non-existing-capability.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }}
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/non-existing-capability.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.NO_POLICIES_FOUND }}

      - name: Test config with no templates found
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/no-templates-found.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.NO_TEMPLATES_FOUND }}

      - name: Test single JSON template with violations (001)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/001.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.VIOLATIONS_FOUND }}
          ./tests/scripts/assert-output.sh output.json ${{ env.OUTPUTS }}/001.json

      - name: Test single YAML template with violations (002)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/002.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.VIOLATIONS_FOUND }}
          ./tests/scripts/assert-output.sh output.json ${{ env.OUTPUTS }}/002.json

      - name: Test matching a random json (not a cfn template)
        run: |
          EXIT_CODE=0
          gomboc scan cloudformation github --config ${{ env.CONFIGS }}/match-not-a-cfn-template.yaml --auth-token ${{ steps.get-oidc-token.outputs.ID_TOKEN }} --output json > output.json || EXIT_CODE=$?
          ./tests/scripts/assert-code.sh $EXIT_CODE ${{ env.TEMPLATE_ERROR }}
